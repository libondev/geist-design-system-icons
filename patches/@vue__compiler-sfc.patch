diff --git a/dist/compiler-sfc.cjs.js b/dist/compiler-sfc.cjs.js
index dc6a170c07318626845a6a1805ea8b82ac296015..99f8a9be9b0f210496e76a9354fdec2ae679fb47 100644
--- a/dist/compiler-sfc.cjs.js
+++ b/dist/compiler-sfc.cjs.js
@@ -1432,11 +1432,11 @@ class LRUCache {
             b.__abortController instanceof AC);
     }
     async fetch(k, fetchOptions = {}) {
-        const { 
+        const {
         // get options
-        allowStale = this.allowStale, updateAgeOnGet = this.updateAgeOnGet, noDeleteOnStaleGet = this.noDeleteOnStaleGet, 
+        allowStale = this.allowStale, updateAgeOnGet = this.updateAgeOnGet, noDeleteOnStaleGet = this.noDeleteOnStaleGet,
         // set options
-        ttl = this.ttl, noDisposeOnSet = this.noDisposeOnSet, size = 0, sizeCalculation = this.sizeCalculation, noUpdateTTL = this.noUpdateTTL, 
+        ttl = this.ttl, noDisposeOnSet = this.noDisposeOnSet, size = 0, sizeCalculation = this.sizeCalculation, noUpdateTTL = this.noUpdateTTL,
         // fetch exclusive options
         noDeleteOnFetchRejection = this.noDeleteOnFetchRejection, allowStaleOnFetchRejection = this.allowStaleOnFetchRejection, ignoreFetchAbort = this.ignoreFetchAbort, allowStaleOnFetchAbort = this.allowStaleOnFetchAbort, context, forceRefresh = false, status, signal, } = fetchOptions;
         if (!this.#hasFetchMethod) {
@@ -1817,15 +1817,6 @@ function parse$1(source, options = {}) {
           if (!templateBlock.attrs.src) {
             templateBlock.ast = compilerCore.createRoot(node.children, source);
           }
-          if (templateBlock.attrs.functional) {
-            const err = new SyntaxError(
-              `<template functional> is no longer supported in Vue 3, since functional components no longer have significant performance difference from stateful ones. Just use a normal <template> instead.`
-            );
-            err.loc = node.props.find(
-              (p) => p.type === 6 && p.name === "functional"
-            ).loc;
-            errors.push(err);
-          }
         } else {
           errors.push(createDuplicateBlockError(node));
         }
@@ -4085,7 +4076,7 @@ function requireConsolidate$1 () {
 
 		/**
 		 * Twing string support.
-		 */ 
+		 */
 
 		exports.twing.render = function(str, options, cb) {
 		  return promisify(cb, function(cb) {
@@ -4105,7 +4096,7 @@ function requireConsolidate$1 () {
 		/**
 		 * expose the instance of the engine
 		 */
-		exports.requires = requires; 
+		exports.requires = requires;
 	} (consolidate$2, consolidate$2.exports));
 	return consolidate$2.exports;
 }
@@ -4384,8 +4375,8 @@ function requireUnesc$1 () {
 		// https://mathiasbynens.be/notes/css-escapes
 
 		/**
-		 * 
-		 * @param {string} str 
+		 *
+		 * @param {string} str
 		 * @returns {[string, number]|undefined}
 		 */
 		function gobbleHex(str) {
@@ -4451,7 +4442,7 @@ function requireUnesc$1 () {
 		  }
 		  return ret;
 		}
-		module.exports = exports.default; 
+		module.exports = exports.default;
 	} (unesc$1, unesc$1.exports));
 	return unesc$1.exports;
 }
@@ -4480,7 +4471,7 @@ function requireGetProp$1 () {
 		  }
 		  return obj;
 		}
-		module.exports = exports.default; 
+		module.exports = exports.default;
 	} (getProp$1, getProp$1.exports));
 	return getProp$1.exports;
 }
@@ -4508,7 +4499,7 @@ function requireEnsureObject$1 () {
 		    obj = obj[prop];
 		  }
 		}
-		module.exports = exports.default; 
+		module.exports = exports.default;
 	} (ensureObject$1, ensureObject$1.exports));
 	return ensureObject$1.exports;
 }
@@ -4540,7 +4531,7 @@ function requireStripComments$1 () {
 		  s = s + str.slice(lastEnd);
 		  return s;
 		}
-		module.exports = exports.default; 
+		module.exports = exports.default;
 	} (stripComments$1, stripComments$1.exports));
 	return stripComments$1.exports;
 }
@@ -4761,7 +4752,7 @@ function requireNode$2 () {
 		  return Node;
 		}();
 		exports["default"] = Node;
-		module.exports = exports.default; 
+		module.exports = exports.default;
 	} (node$2, node$2.exports));
 	return node$2.exports;
 }
@@ -4930,7 +4921,7 @@ function requireContainer$1 () {
 		   * Return the most specific node at the line and column number given.
 		   * The source location is based on the original parsed location, locations aren't
 		   * updated as selector nodes are mutated.
-		   * 
+		   *
 		   * Note that this location is relative to the location of the first character
 		   * of the selector, and not the location of the selector in the overall document
 		   * when used in conjunction with postcss.
@@ -5118,7 +5109,7 @@ function requireContainer$1 () {
 		  return Container;
 		}(_node["default"]);
 		exports["default"] = Container;
-		module.exports = exports.default; 
+		module.exports = exports.default;
 	} (container$1, container$1.exports));
 	return container$1.exports;
 }
@@ -5171,7 +5162,7 @@ function requireRoot$1 () {
 		  return Root;
 		}(_container["default"]);
 		exports["default"] = Root;
-		module.exports = exports.default; 
+		module.exports = exports.default;
 	} (root$1, root$1.exports));
 	return root$1.exports;
 }
@@ -5203,7 +5194,7 @@ function requireSelector$1 () {
 		  return Selector;
 		}(_container["default"]);
 		exports["default"] = Selector;
-		module.exports = exports.default; 
+		module.exports = exports.default;
 	} (selector$1, selector$1.exports));
 	return selector$1.exports;
 }
@@ -5382,7 +5373,7 @@ function requireClassName$1 () {
 		  return ClassName;
 		}(_node["default"]);
 		exports["default"] = ClassName;
-		module.exports = exports.default; 
+		module.exports = exports.default;
 	} (className$1, className$1.exports));
 	return className$1.exports;
 }
@@ -5414,7 +5405,7 @@ function requireComment$1 () {
 		  return Comment;
 		}(_node["default"]);
 		exports["default"] = Comment;
-		module.exports = exports.default; 
+		module.exports = exports.default;
 	} (comment$1, comment$1.exports));
 	return comment$1.exports;
 }
@@ -5450,7 +5441,7 @@ function requireId$1 () {
 		  return ID;
 		}(_node["default"]);
 		exports["default"] = ID;
-		module.exports = exports.default; 
+		module.exports = exports.default;
 	} (id$1, id$1.exports));
 	return id$1.exports;
 }
@@ -5542,7 +5533,7 @@ function requireNamespace$1 () {
 		  return Namespace;
 		}(_node["default"]);
 		exports["default"] = Namespace;
-		module.exports = exports.default; 
+		module.exports = exports.default;
 	} (namespace$1, namespace$1.exports));
 	return namespace$1.exports;
 }
@@ -5572,7 +5563,7 @@ function requireTag$1 () {
 		  return Tag;
 		}(_namespace["default"]);
 		exports["default"] = Tag;
-		module.exports = exports.default; 
+		module.exports = exports.default;
 	} (tag$1, tag$1.exports));
 	return tag$1.exports;
 }
@@ -5604,7 +5595,7 @@ function requireString$1 () {
 		  return String;
 		}(_node["default"]);
 		exports["default"] = String;
-		module.exports = exports.default; 
+		module.exports = exports.default;
 	} (string$1, string$1.exports));
 	return string$1.exports;
 }
@@ -5641,7 +5632,7 @@ function requirePseudo$1 () {
 		  return Pseudo;
 		}(_container["default"]);
 		exports["default"] = Pseudo;
-		module.exports = exports.default; 
+		module.exports = exports.default;
 	} (pseudo$1, pseudo$1.exports));
 	return pseudo$1.exports;
 }
@@ -6114,7 +6105,7 @@ function requireAttribute$1 () {
 		}, _CSSESC_QUOTE_OPTIONS);
 		function defaultAttrConcat(attrValue, attrSpaces) {
 		  return "" + attrSpaces.before + attrValue + attrSpaces.after;
-		} 
+		}
 	} (attribute$1));
 	return attribute$1;
 }
@@ -6147,7 +6138,7 @@ function requireUniversal$1 () {
 		  return Universal;
 		}(_namespace["default"]);
 		exports["default"] = Universal;
-		module.exports = exports.default; 
+		module.exports = exports.default;
 	} (universal$1, universal$1.exports));
 	return universal$1.exports;
 }
@@ -6179,7 +6170,7 @@ function requireCombinator$1 () {
 		  return Combinator;
 		}(_node["default"]);
 		exports["default"] = Combinator;
-		module.exports = exports.default; 
+		module.exports = exports.default;
 	} (combinator$1, combinator$1.exports));
 	return combinator$1.exports;
 }
@@ -6212,7 +6203,7 @@ function requireNesting$1 () {
 		  return Nesting;
 		}(_node["default"]);
 		exports["default"] = Nesting;
-		module.exports = exports.default; 
+		module.exports = exports.default;
 	} (nesting$1, nesting$1.exports));
 	return nesting$1.exports;
 }
@@ -6233,7 +6224,7 @@ function requireSortAscending$1 () {
 		    return a - b;
 		  });
 		}
-		module.exports = exports.default; 
+		module.exports = exports.default;
 	} (sortAscending$1, sortAscending$1.exports));
 	return sortAscending$1.exports;
 }
@@ -6560,7 +6551,7 @@ function requireTokenize$1 () {
 		    start = end;
 		  }
 		  return tokens;
-		} 
+		}
 	} (tokenize$1));
 	return tokenize$1;
 }
@@ -7582,7 +7573,7 @@ function requireParser$2 () {
 		  return Parser;
 		}();
 		exports["default"] = Parser;
-		module.exports = exports.default; 
+		module.exports = exports.default;
 	} (parser$1, parser$1.exports));
 	return parser$1.exports;
 }
@@ -7761,7 +7752,7 @@ function requireProcessor$1 () {
 		  return Processor;
 		}();
 		exports["default"] = Processor;
-		module.exports = exports.default; 
+		module.exports = exports.default;
 	} (processor$1, processor$1.exports));
 	return processor$1.exports;
 }
@@ -7934,7 +7925,7 @@ function requireSelectors$1 () {
 		  if (key === "default" || key === "__esModule") return;
 		  if (key in exports && exports[key] === _guards[key]) return;
 		  exports[key] = _guards[key];
-		}); 
+		});
 	} (selectors$1));
 	return selectors$1;
 }
@@ -7960,7 +7951,7 @@ function requireDist$1 () {
 		delete parser.__esModule;
 		var _default = parser;
 		exports["default"] = _default;
-		module.exports = exports.default; 
+		module.exports = exports.default;
 	} (dist$1, dist$1.exports));
 	return dist$1.exports;
 }
@@ -8909,7 +8900,7 @@ function requireUtil$1 () {
 
 		  return normalize(sourceURL);
 		}
-		exports.computeSourceURL = computeSourceURL; 
+		exports.computeSourceURL = computeSourceURL;
 	} (util$1));
 	return util$1;
 }
@@ -9691,7 +9682,7 @@ function requireBinarySearch () {
 		  }
 
 		  return index;
-		}; 
+		};
 	} (binarySearch));
 	return binarySearch;
 }
@@ -10882,7 +10873,7 @@ function requireSourceMapConsumer () {
 	 * and an object is returned with the following properties:
 	 *
 	 *   - line: The line number in the generated source, or null.  The
-	 *     line number is 1-based. 
+	 *     line number is 1-based.
 	 *   - column: The column number in the generated source, or null.
 	 *     The column number is 0-based.
 	 */
@@ -13961,8 +13952,8 @@ function requireUnesc () {
 		// https://mathiasbynens.be/notes/css-escapes
 
 		/**
-		 * 
-		 * @param {string} str 
+		 *
+		 * @param {string} str
 		 * @returns {[string, number]|undefined}
 		 */
 		function gobbleHex(str) {
@@ -14028,7 +14019,7 @@ function requireUnesc () {
 		  }
 		  return ret;
 		}
-		module.exports = exports.default; 
+		module.exports = exports.default;
 	} (unesc, unesc.exports));
 	return unesc.exports;
 }
@@ -14057,7 +14048,7 @@ function requireGetProp () {
 		  }
 		  return obj;
 		}
-		module.exports = exports.default; 
+		module.exports = exports.default;
 	} (getProp, getProp.exports));
 	return getProp.exports;
 }
@@ -14085,7 +14076,7 @@ function requireEnsureObject () {
 		    obj = obj[prop];
 		  }
 		}
-		module.exports = exports.default; 
+		module.exports = exports.default;
 	} (ensureObject, ensureObject.exports));
 	return ensureObject.exports;
 }
@@ -14117,7 +14108,7 @@ function requireStripComments () {
 		  s = s + str.slice(lastEnd);
 		  return s;
 		}
-		module.exports = exports.default; 
+		module.exports = exports.default;
 	} (stripComments, stripComments.exports));
 	return stripComments.exports;
 }
@@ -14338,7 +14329,7 @@ function requireNode () {
 		  return Node;
 		}();
 		exports["default"] = Node;
-		module.exports = exports.default; 
+		module.exports = exports.default;
 	} (node, node.exports));
 	return node.exports;
 }
@@ -14504,7 +14495,7 @@ function requireContainer () {
 		   * Return the most specific node at the line and column number given.
 		   * The source location is based on the original parsed location, locations aren't
 		   * updated as selector nodes are mutated.
-		   * 
+		   *
 		   * Note that this location is relative to the location of the first character
 		   * of the selector, and not the location of the selector in the overall document
 		   * when used in conjunction with postcss.
@@ -14692,7 +14683,7 @@ function requireContainer () {
 		  return Container;
 		}(_node["default"]);
 		exports["default"] = Container;
-		module.exports = exports.default; 
+		module.exports = exports.default;
 	} (container, container.exports));
 	return container.exports;
 }
@@ -14745,7 +14736,7 @@ function requireRoot () {
 		  return Root;
 		}(_container["default"]);
 		exports["default"] = Root;
-		module.exports = exports.default; 
+		module.exports = exports.default;
 	} (root, root.exports));
 	return root.exports;
 }
@@ -14777,7 +14768,7 @@ function requireSelector () {
 		  return Selector;
 		}(_container["default"]);
 		exports["default"] = Selector;
-		module.exports = exports.default; 
+		module.exports = exports.default;
 	} (selector, selector.exports));
 	return selector.exports;
 }
@@ -14838,7 +14829,7 @@ function requireClassName () {
 		  return ClassName;
 		}(_node["default"]);
 		exports["default"] = ClassName;
-		module.exports = exports.default; 
+		module.exports = exports.default;
 	} (className, className.exports));
 	return className.exports;
 }
@@ -14870,7 +14861,7 @@ function requireComment () {
 		  return Comment;
 		}(_node["default"]);
 		exports["default"] = Comment;
-		module.exports = exports.default; 
+		module.exports = exports.default;
 	} (comment, comment.exports));
 	return comment.exports;
 }
@@ -14906,7 +14897,7 @@ function requireId () {
 		  return ID;
 		}(_node["default"]);
 		exports["default"] = ID;
-		module.exports = exports.default; 
+		module.exports = exports.default;
 	} (id, id.exports));
 	return id.exports;
 }
@@ -14998,7 +14989,7 @@ function requireNamespace () {
 		  return Namespace;
 		}(_node["default"]);
 		exports["default"] = Namespace;
-		module.exports = exports.default; 
+		module.exports = exports.default;
 	} (namespace, namespace.exports));
 	return namespace.exports;
 }
@@ -15028,7 +15019,7 @@ function requireTag () {
 		  return Tag;
 		}(_namespace["default"]);
 		exports["default"] = Tag;
-		module.exports = exports.default; 
+		module.exports = exports.default;
 	} (tag, tag.exports));
 	return tag.exports;
 }
@@ -15060,7 +15051,7 @@ function requireString () {
 		  return String;
 		}(_node["default"]);
 		exports["default"] = String;
-		module.exports = exports.default; 
+		module.exports = exports.default;
 	} (string, string.exports));
 	return string.exports;
 }
@@ -15097,7 +15088,7 @@ function requirePseudo () {
 		  return Pseudo;
 		}(_container["default"]);
 		exports["default"] = Pseudo;
-		module.exports = exports.default; 
+		module.exports = exports.default;
 	} (pseudo, pseudo.exports));
 	return pseudo.exports;
 }
@@ -15556,7 +15547,7 @@ function requireAttribute () {
 		}, _CSSESC_QUOTE_OPTIONS);
 		function defaultAttrConcat(attrValue, attrSpaces) {
 		  return "" + attrSpaces.before + attrValue + attrSpaces.after;
-		} 
+		}
 	} (attribute));
 	return attribute;
 }
@@ -15589,7 +15580,7 @@ function requireUniversal () {
 		  return Universal;
 		}(_namespace["default"]);
 		exports["default"] = Universal;
-		module.exports = exports.default; 
+		module.exports = exports.default;
 	} (universal, universal.exports));
 	return universal.exports;
 }
@@ -15621,7 +15612,7 @@ function requireCombinator () {
 		  return Combinator;
 		}(_node["default"]);
 		exports["default"] = Combinator;
-		module.exports = exports.default; 
+		module.exports = exports.default;
 	} (combinator, combinator.exports));
 	return combinator.exports;
 }
@@ -15654,7 +15645,7 @@ function requireNesting () {
 		  return Nesting;
 		}(_node["default"]);
 		exports["default"] = Nesting;
-		module.exports = exports.default; 
+		module.exports = exports.default;
 	} (nesting, nesting.exports));
 	return nesting.exports;
 }
@@ -15675,7 +15666,7 @@ function requireSortAscending () {
 		    return a - b;
 		  });
 		}
-		module.exports = exports.default; 
+		module.exports = exports.default;
 	} (sortAscending, sortAscending.exports));
 	return sortAscending.exports;
 }
@@ -16002,7 +15993,7 @@ function requireTokenize () {
 		    start = end;
 		  }
 		  return tokens;
-		} 
+		}
 	} (tokenize));
 	return tokenize;
 }
@@ -17024,7 +17015,7 @@ function requireParser () {
 		  return Parser;
 		}();
 		exports["default"] = Parser;
-		module.exports = exports.default; 
+		module.exports = exports.default;
 	} (parser, parser.exports));
 	return parser.exports;
 }
@@ -17203,7 +17194,7 @@ function requireProcessor () {
 		  return Processor;
 		}();
 		exports["default"] = Processor;
-		module.exports = exports.default; 
+		module.exports = exports.default;
 	} (processor, processor.exports));
 	return processor.exports;
 }
@@ -17376,7 +17367,7 @@ function requireSelectors () {
 		  if (key === "default" || key === "__esModule") return;
 		  if (key in exports && exports[key] === _guards[key]) return;
 		  exports[key] = _guards[key];
-		}); 
+		});
 	} (selectors));
 	return selectors;
 }
@@ -17402,7 +17393,7 @@ function requireDist () {
 		delete parser.__esModule;
 		var _default = parser;
 		exports["default"] = _default;
-		module.exports = exports.default; 
+		module.exports = exports.default;
 	} (dist, dist.exports));
 	return dist.exports;
 }
@@ -20097,7 +20088,7 @@ function requireBraceExpansion () {
 	    ? expand(m.post, false)
 	    : [''];
 
-	  if (/\$$/.test(m.pre)) {    
+	  if (/\$$/.test(m.pre)) {
 	    for (var k = 0; k < post.length; k++) {
 	      var expansion = pre+ '{' + m.body + '}' + post[k];
 	      expansions.push(expansion);
@@ -20812,7 +20803,7 @@ class AST {
                         const aps = addPatternStart;
                         // check if we have a possibility of matching . or ..,
                         // and prevent that.
-                        const needNoTrav = 
+                        const needNoTrav =
                         // dots are allowed, and the pattern starts with [ or .
                         (dot && aps.has(src.charAt(0))) ||
                             // the pattern starts with \., and then [ or .
